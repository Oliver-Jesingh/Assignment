{"version":3,"sources":["components/TextField.js","components/DropdownField.js","containers/FlexiForm.js","App.js","serviceWorker.js","index.js"],"names":["TextField","props","label","type","name","onChange","handleChange","DropdownField","DropdownOption","val","map","values","value","key","FlexiForm","state","items","id","onFlexiSubmit","event","preventDefault","postObject","postData","target","reset","console","log","newData","x","setState","this","className","Container","Row","Col","md","onSubmit","form","e","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAeeA,EAbG,SAACC,GACf,OACI,6BACI,+BAAQA,EAAMC,OACd,2BACIC,KAAK,OACLC,KAAMH,EAAMG,KACZC,SAAUJ,EAAMK,iBCejBC,EAtBO,SAACN,GAEnB,IAAMO,EAAiBP,EAAMQ,IAAIC,KAAI,SAACC,GAClC,OACI,4BAAQC,MAAOD,EAAQE,IAAKF,GACvBA,MAKb,OACI,6BACI,+BAAQV,EAAMC,OACd,4BAAQE,KAAMH,EAAMG,KAAMC,SAAUJ,EAAMK,cACtC,4BAAQM,MAAM,IAAd,4BACCJ,KC2EFM,E,4MAtFXC,MAAQ,CACJC,MAAO,CACH,CACIC,GAAI,EACJb,KAAM,cACNF,MAAO,gBACPC,KAAM,OACNS,MAAO,IAEX,CACIK,GAAI,EACJb,KAAM,SACNF,MAAO,iBACPC,KAAM,WACNQ,OAAQ,CACJ,cACA,SACA,cAEJC,MAAO,M,EAKnBM,cAAgB,SAACC,GACbA,EAAMC,iBACN,IAAIC,EAAa,EAAKN,MAAMC,MAAMN,KAAI,SAAAY,GAClC,OAAO,eAAGA,EAASlB,KAAOkB,EAASV,UAEvCO,EAAMI,OAAOC,QACbC,QAAQC,IAAIL,I,EAGhBf,aAAe,SAACa,EAAOF,GACnB,IAAIU,EAAU,EAAKZ,MAAMC,MAAMN,KAAI,SAAAkB,GAI/B,OAHIA,EAAEX,IAAMA,IACRW,EAAEhB,MAAQO,EAAMI,OAAOX,OAEpBgB,KAEX,EAAKC,SAAS,CACVb,MAAOW,K,uDAIL,IAAD,OACGX,EAAUc,KAAKf,MAAfC,MACR,OACI,yBAAKe,UAAU,gBACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIJ,UAAU,eACnB,0BAAMA,UAAU,aAAaK,SAAUN,KAAKZ,eACvCF,EAAMN,KAAI,SAAC2B,GACR,MAAkB,SAAdA,EAAKlC,KAED,kBAAC,EAAD,CACIC,KAAMiC,EAAKjC,KACXS,IAAKwB,EAAKpB,GACVf,MAAOmC,EAAKnC,MACZI,aAAc,SAACgC,GAAD,OAAO,EAAKhC,aAAagC,EAAGD,EAAKpB,OAIzC,aAAdoB,EAAKlC,KAED,kBAAC,EAAD,CACIC,KAAMiC,EAAKjC,KACXS,IAAKwB,EAAKpB,GACVR,IAAK4B,EAAK1B,OACVT,MAAOmC,EAAKnC,MACZI,aAAc,SAACgC,GAAD,OAAO,EAAKhC,aAAagC,EAAGD,EAAKpB,YAP3D,KAYJ,2BAAOd,KAAK,oB,GA7EpBoC,aCOTC,MARf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCKcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.6343f64e.chunk.js","sourcesContent":["import React from 'react'\n\nconst TextField = (props) => {\n    return (\n        <div>\n            <label>{props.label}</label>\n            <input\n                type=\"text\"\n                name={props.name}\n                onChange={props.handleChange}\n            />\n        </div>\n    )\n}\n\nexport default TextField;","import React from 'react'\n\nconst DropdownField = (props) => {\n\n    const DropdownOption = props.val.map((values) => {\n        return (\n            <option value={values} key={values}>\n                {values}\n            </option>\n        )\n    })\n\n    return (\n        <div>\n            <label>{props.label}</label>\n            <select name={props.name} onChange={props.handleChange}>\n                <option value=\"\">Please Select Your State</option>\n                {DropdownOption}\n            </select>\n\n        </div>\n    )\n}\n\nexport default DropdownField;\n","import React, { Component } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport TextField from '../components/TextField'\nimport DropdownField from '../components/DropdownField'\n\nclass FlexiForm extends Component {\n    state = {\n        items: [\n            {\n                id: 1,\n                name: \"person_name\",\n                label: \"Person's Name\",\n                type: \"text\",\n                value: ''\n            },\n            {\n                id: 2,\n                name: \"states\",\n                label: \"Person's state\",\n                type: \"dropdown\",\n                values: [\n                    \"Maharashtra\",\n                    \"Kerala\",\n                    \"Tamil Nadu\"\n                ],\n                value: ''\n            }\n        ]\n    }\n\n    onFlexiSubmit = (event) => {\n        event.preventDefault();\n        let postObject = this.state.items.map(postData => {\n            return { [postData.name]: postData.value }\n        })\n        event.target.reset();\n        console.log(postObject);\n    }\n\n    handleChange = (event, id) => {\n        let newData = this.state.items.map(x => {\n            if (x.id == id) {\n                x.value = event.target.value\n            }\n            return x;\n        })\n        this.setState({\n            items: newData\n        });\n    }\n\n    render() {\n        const { items } = this.state;\n        return (\n            <div className=\"form-wrapper\">\n                <Container>\n                    <Row>\n                        <Col md={12} className=\"text-center\">\n                            <form className=\"form-class\" onSubmit={this.onFlexiSubmit}>\n                                {items.map((form) => {\n                                    if (form.type === \"text\") {\n                                        return (\n                                            <TextField\n                                                name={form.name}\n                                                key={form.id}\n                                                label={form.label}\n                                                handleChange={(e) => this.handleChange(e, form.id)}\n                                            />\n                                        );\n                                    }\n                                    if (form.type === \"dropdown\") {\n                                        return (\n                                            <DropdownField\n                                                name={form.name}\n                                                key={form.id}\n                                                val={form.values}\n                                                label={form.label}\n                                                handleChange={(e) => this.handleChange(e, form.id)}\n                                            />\n                                        );\n                                    }\n                                })}\n                                <input type=\"submit\" />\n                            </form>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default FlexiForm;\n","import React from 'react';\nimport './App.css';\nimport FlexiForm from './containers/FlexiForm.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FlexiForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}